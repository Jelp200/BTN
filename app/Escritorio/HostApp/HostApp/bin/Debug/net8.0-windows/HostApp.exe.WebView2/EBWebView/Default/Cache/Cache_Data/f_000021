document.addEventListener("DOMContentLoaded", () => {
  const panels = document.querySelectorAll(".panel-container");
  panels.forEach((panel) => {
    const tabButtons = panel.querySelectorAll("[data-tab]");
    const tabContents = panel.querySelectorAll("[data-tab-content]");
    const selects = panel.querySelectorAll("select");
    const controlButtons = panel.querySelectorAll(".control-btn");
    const ledButtons = panel.querySelectorAll(".led-button");
    const tiempoInput = panel.querySelector("#tiempo-input-form");
    const tiempoMostrado = panel.querySelector("#tiempo-mostrado");
    const btnEnviarTiempo = panel.querySelector("#btn-enviar-tiempo");
    const estadoCabina = panel.querySelector("#estado-cabina");
    const colorCabina = panel.querySelector("#color-cabina");
    const estadoHumo = panel.querySelector("#estado-humo");
    let cabinaActiva = false;
    function updateTabHover() {
      tabButtons.forEach((btn) => {
        if (btn.classList.contains("active")) {
          btn.classList.remove("hover:bg-[#a6a6a6]");
        } else {
          btn.classList.add("hover:bg-[#a6a6a6]");
        }
      });
    }
    function updateSelectHover() {
      selects.forEach((select) => {
        const isActive = select.value.includes("1");
        if (isActive) {
          select.style.transition = "none";
          select.style.backgroundColor = window.getComputedStyle(select).backgroundColor;
          select.classList.remove("hover:bg-[#a6a6a6]");
        } else {
          select.style.transition = "";
          select.style.backgroundColor = "";
          select.classList.add("hover:bg-[#a6a6a6]");
        }
      });
    }
    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => {
          btn.classList.remove("bg-[#d9d9d9]", "text-black", "active");
          btn.classList.add("bg-[#efefef]", "text-black");
          btn.setAttribute("aria-selected", "false");
          btn.setAttribute("tabindex", "-1");
        });
        button.classList.remove("bg-[#efefef]", "text-black");
        button.classList.add("bg-[#d9d9d9]", "text-black", "active");
        button.setAttribute("aria-selected", "true");
        button.setAttribute("tabindex", "0");
        tabContents.forEach(
          (content) => content.classList.add("hidden")
        );
        const selectedTab = button.getAttribute("data-tab");
        const selectedContent = panel.querySelector(
          `[data-tab-content='${selectedTab}']`
        );
        if (selectedContent) {
          selectedContent.classList.remove("hidden");
          if (selectedTab === "graficas") {
            initGrafica(panel);
          }
        }
        updateTabHover();
        updateSelectHover();
      });
    });
    selects.forEach((select) => {
      select.addEventListener("change", updateSelectHover);
    });
    controlButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        btn.classList.toggle("bg-[#00bf63]");
        btn.classList.toggle("bg-[#d9d9d9]");
      });
    });
    if (btnEnviarTiempo && tiempoInput && tiempoMostrado) {
      tiempoInput.addEventListener("input", () => {
        let valor = parseInt(tiempoInput.value);
        if (!valor || valor < 0) {
          tiempoInput.value = 0;
          valor = 0;
        }
        tiempoMostrado.textContent = valor;
      });
      btnEnviarTiempo.addEventListener("click", () => {
        let valorMinutos = parseInt(tiempoInput.value);
        if (!valorMinutos || valorMinutos < 0) {
          alert("Por favor, ingrese un número válido y no negativo.");
          tiempoInput.value = 0;
          valorMinutos = 0;
        }
        tiempoMostrado.textContent = valorMinutos;
        const valorSegundos = Math.min(valorMinutos * 60, 300);
        const graficaCanvas = panel.querySelector("#graficaPanel");
        if (graficaCanvas) {
          graficaCanvas.setAttribute("data-time-range", valorSegundos);
          if (cabinaActiva && graficaCanvas.chartInstance) {
            const chart = graficaCanvas.chartInstance;
            const labels = [];
            for (let i = 0; i < 10; i++) {
              labels.push(`${i * (valorSegundos / 10)}s`);
            }
            chart.data.labels = labels;
            chart.data.datasets[0].data = labels.map(() => Math.floor(Math.random() * 5));
            chart.update();
          }
        }
      });
    }
    const botonHumo = panel.querySelector("[data-medicion='X']");
    ledButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const row = button.getAttribute("data-row");
        ledButtons.forEach((led) => {
          if (led.getAttribute("data-row") === row && led !== button) {
            led.classList.remove("active-led");
            led.style.backgroundColor = led.getAttribute("data-inactive-color");
          }
        });
        const activeColor = button.getAttribute("data-active-color");
        const inactiveColor = button.getAttribute("data-inactive-color");
        if (button.classList.contains("active-led")) {
          button.classList.remove("active-led");
          button.style.backgroundColor = inactiveColor;
          colorCabina.style.backgroundColor = "#d9d9d9";
        } else {
          button.classList.add("active-led");
          button.style.backgroundColor = activeColor;
          colorCabina.style.backgroundColor = activeColor;
        }
      });
    });
    if (botonHumo && estadoHumo) {
      botonHumo.addEventListener("click", () => {
        if (!cabinaActiva) {
          alert("La cabina debe estar activa antes de usar esta función.");
          return;
        }
        humoActivado = !humoActivado;
        if (humoActivado) {
          estadoHumo.style.backgroundColor = "#d9d9d9";
          estadoHumo.style.opacity = "1";
        } else {
          estadoHumo.style.backgroundColor = "#ccc";
          estadoHumo.style.opacity = "0.5";
        }
      });
    }
    const medicionBotones = panel.querySelectorAll(".medicion-btn");
    const medicionTextos = panel.querySelectorAll(".medicion-texto");
    if (medicionBotones.length > 0 && medicionTextos.length > 0) {
      medicionBotones.forEach((boton, index) => {
        boton.addEventListener("click", () => {
          if (!cabinaActiva) {
            alert("Por favor, inicie la cabina antes de usar las mediciones.");
            return;
          }
          medicionBotones.forEach((btn, i) => {
            if (btn !== boton) {
              btn.classList.remove("activo", "bg-[#00bf63]");
              btn.classList.add("bg-[#d9d9d9]");
              medicionTextos[i].textContent = "N/A";
            }
          });
          boton.classList.remove("bg-[#d9d9d9]");
          boton.classList.add("bg-[#00bf63]", "activo");
          const nombre = boton.dataset.medicion;
          const textoElemento = medicionTextos[index];
          const valorSimulado = (Math.random() * 10).toFixed(1);
          textoElemento.textContent = `${valorSimulado} ${getUnidad(nombre)}`;
        });
      });
    }
    const btnIniciar = panel.querySelector("#btn-enviar-configuracion");
    if (btnIniciar && estadoCabina) {
      btnIniciar.addEventListener("click", () => {
        if (!cabinaActiva) {
          cabinaActiva = true;
          estadoCabina.classList.remove("bg-[#d9d9d9]");
          estadoCabina.classList.add("bg-[#00bf63]");
          estadoCabina.textContent = "ACTIVA";
          alert("Sistema iniciado. ¡La cabina ha sido activada!");
        } else {
          alert("Ya está activa. No se puede enviar otra vez sin resetear.");
        }
      });
    }
    const btnReset = panel.querySelector("#btn-parar-reset");
    if (btnReset && estadoCabina) {
      btnReset.addEventListener("click", () => {
        estadoCabina.classList.remove("bg-[#00bf63]");
        estadoCabina.classList.add("bg-[#d9d9d9]");
        estadoCabina.textContent = "INACTIVA";
        cabinaActiva = false;
        controlButtons.forEach((btn) => {
          btn.classList.remove("bg-[#00bf63]");
          btn.classList.add("bg-[#d9d9d9]");
        });
        const graficaCanvas = panel.querySelector("#graficaPanel");
        if (graficaCanvas && graficaCanvas.chartInstance) {
          graficaCanvas.chartInstance.destroy();
        }
        medicionTextos.forEach((txt) => {
          txt.textContent = "N/A";
        });
        ledButtons.forEach((led) => {
          led.classList.remove("active-led");
          led.style.backgroundColor = led.getAttribute("data-inactive-color");
        });
        if (tiempoInput) {
          tiempoInput.value = 0;
        }
        alert("Sistema detenido. Todo ha sido reiniciado.");
      });
    }
    setTimeout(updateTabHover, 0);
    setTimeout(updateSelectHover, 0);
  });
});
function getUnidad(medicion) {
  switch (medicion) {
    case "X":
      return "m";
    case "T":
      return "°C";
    case "CO2":
      return "ppm";
    case "Y":
      return "m";
    case "%H":
      return "%";
    case "%O2":
      return "%";
    case "Z":
      return "m";
    case "UV":
      return "W/m²";
    case "Son":
      return "dB";
    default:
      return "";
  }
}
function initGrafica(panel) {
  const graficaCanvas = panel.querySelector("#graficaPanel");
  if (!graficaCanvas) return;
  const existingChart = Chart.getChart(graficaCanvas);
  if (existingChart) {
    existingChart.destroy();
  }
  const ctx = graficaCanvas.getContext("2d");
  const valorSegundos = parseInt(graficaCanvas.getAttribute("data-time-range")) || 300;
  const labels = [];
  const maxPuntos = 10;
  for (let i = 0; i < maxPuntos; i++) {
    labels.push(`${i * (valorSegundos / maxPuntos)}s`);
  }
  const dataValues = labels.map(() => Math.floor(Math.random() * 5));
  graficaCanvas.chartInstance = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [
        {
          label: "Sensor 1",
          data: dataValues,
          borderColor: "#000",
          backgroundColor: "rgba(0, 74, 173, 0.2)",
          tension: 0.3,
          pointRadius: 4,
          fill: true
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: {
          title: {
            display: true,
            text: "Tiempo (s)",
            color: "#333",
            font: { weight: "bold" }
          },
          grid: { color: "#ddd" }
        },
        y: {
          title: {
            display: true,
            text: "Amplitud",
            color: "#333",
            font: { weight: "bold" }
          },
          grid: { color: "#ddd" }
        }
      },
      plugins: {
        legend: {
          display: true,
          labels: { color: "#333" }
        }
      }
    }
  });
}

//# sourceMappingURL=data:application/json;base64,