---
//* IMPORTS
import CabinPanel from "./CabinPanel.astro";
---

<!-- * CONTENEDOR PRINCIPAL RESPONSIVO * -->
<div class="flex flex-col md:flex-row gap-6 p-6">
    <CabinPanel />
    <CabinPanel />
</div>

<!-- CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js "></script>

<!-- Script principal -->
<script>
    // Verificar si el navegador soporta Web Serial API
    if (!("serial" in navigator)) {
        const mensaje =
            "‚ö†Ô∏è Web Serial API no soportado. Use Chrome, Edge u Opera.";

        // Mostrar alerta emergente
        alert(mensaje);

        // Crear una notificaci√≥n tipo toast en pantalla
        const notificacion = document.createElement("div");
        notificacion.textContent = mensaje;
        notificacion.style.position = "fixed";
        notificacion.style.top = "20px";
        notificacion.style.right = "20px";
        notificacion.style.backgroundColor = "#ff4d4d";
        notificacion.style.color = "white";
        notificacion.style.padding = "10px 20px";
        notificacion.style.borderRadius = "6px";
        notificacion.style.zIndex = "9999";
        notificacion.style.fontFamily = "Arial, sans-serif";
        notificacion.style.fontSize = "14px";
        notificacion.style.boxShadow = "0 2px 8px rgba(0,0,0,0.2)";

        document.body.appendChild(notificacion);
    }

    navigator.serial.addEventListener("disconnect", (event) => {
        if (puertoPreviamenteConectado) {
            alert("‚ùå El puerto COM se ha desconectado inesperadamente.");
            mostrarNotificacion(
                "Puerto desconectado inesperadamente.",
                "error",
            );
            puertoSerialConectado = false;
            puertoPreviamenteConectado = false;
        }
    });

    // Mapeo entre data-codigo y acci√≥n (ON/OFF)
    const codigoBoton = {
        VIBRACION: { off: "038", on: "039" },
        VENTILADOR: { off: "040", on: "041" },
        EXTRACTOR: { off: "042", on: "043" },
        FRIO: { off: "044", on: "045" },
        CALOR: { off: "046", on: "047" },
        HUMEDAD: { off: "048", on: "049" },
        DESHUMIDIFICADOR: { off: "055", on: "056" },
        HUMO: { off: "050", on: "051" },
    };

    // Configuraci√≥n de sensores y sus frecuencias (en segundos)
    const sensorConfig = {
        TEMP: { frecuencia: 60, label: "Temperatura (¬∞C)" },
        HUM: { frecuencia: 60, label: "Humedad (%)" },
        CO2: { frecuencia: 60, label: "CO‚ÇÇ (ppm)" },
        O3: { frecuencia: 60, label: "Ozono (ppb)" },
        UV: { frecuencia: 60, label: "UV (W/m¬≤)" },
        DB: { frecuencia: 60, label: "Ruido (dB)" },
        X: { frecuencia: 1, label: "Aceleraci√≥n X (m/s¬≤)" },
        Y: { frecuencia: 1, label: "Aceleraci√≥n Y (m/s¬≤)" },
        Z: { frecuencia: 1, label: "Aceleraci√≥n Z (m/s¬≤)" },
    };

    // Estados globales
    let puertoSerial;
    let escritor;
    let cabinaActiva = false;
    let puertoSerialConectado = false;
    let puertoPreviamenteConectado = false; // Detectar desconexiones despu√©s de estar activo
    let graficaSensor = null;

    // Funci√≥n global para mostrar tramas en ventana de logs
    window.mostrarTramaEnLog = function (trama, tipo = "pendiente") {
        const logWindow = document.getElementById("trama-log-window");
        if (!logWindow) return;

        // Limpiar mensaje inicial
        if (
            logWindow.children.length === 1 &&
            logWindow.firstElementChild.textContent.includes(
                "No hay tramas a√∫n",
            )
        ) {
            logWindow.innerHTML = "";
        }

        // Crear entrada de log con icono seg√∫n tipo
        const entry = document.createElement("div");
        entry.className = "p-1 truncate text-xs";

        let icono = "üü°"; // Pendiente / simulada
        if (tipo === "real") icono = "üü¢"; // Realmente enviada

        entry.textContent = `${icono} ${trama}`;

        // Insertar arriba (√∫ltima trama primero)
        logWindow.insertBefore(entry, logWindow.firstChild);
    };

    // Funci√≥n para notificar al usuario.
    function mostrarNotificacion(mensaje, tipo = "info") {
        const logWindow = document.getElementById("trama-log-window");
        if (!logWindow) return;

        // Limpiar mensaje inicial
        if (
            logWindow.children.length === 1 &&
            logWindow.firstElementChild.textContent.includes(
                "No hay tramas a√∫n",
            )
        ) {
            logWindow.innerHTML = "";
        }

        let icono = "üîµ";
        if (tipo === "error") icono = "‚ùå";
        if (tipo === "real") icono = "üü¢";
        if (tipo === "pendiente") icono = "üü°";

        const entry = document.createElement("div");
        entry.className = "log-entry truncate text-xs";
        entry.textContent = `${icono} [${new Date().toLocaleTimeString()}] ${mensaje}`;

        logWindow.insertBefore(entry, logWindow.firstChild);
    }

    // Funci√≥n √∫nica para enviar tramas (simuladas o reales)
    async function enviarTrama(prefijo, codigoAccion, cabinaActiva) {
        const trama = `${prefijo}${codigoAccion}F`;

        if (!cabinaActiva) {
            mostrarNotificacion(trama, "pendiente");
            return;
        }

        const selector = document.getElementById("com-port-selector");
        const port = selector?.value;
        if (!port) {
            mostrarNotificacion("Puerto no seleccionado", "error");
            return;
        }

        try {
            const response = await fetch(
                "http://localhost:5000/api/serial/send",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ portName: port, trama }),
                },
            );

            const mensaje = await response.text();
            mostrarNotificacion(mensaje, "real");
        } catch (err) {
            console.error("Error al enviar trama:", err);
            mostrarNotificacion("Error al enviar trama", "error");
        }
    }

    // Escanear puertos COM del sistema
    async function escanearPuertosCOM() {
        const selector = document.getElementById("com-port-selector");
        if (!selector) return;

        try {
            const response = await fetch(
                "http://localhost:5000/api/serial/ports",
            );
            const puertos = await response.json();

            selector.innerHTML = "";
            if (puertos.length === 0) {
                selector.innerHTML = `<option disabled selected>No hay puertos disponibles</option>`;
                return;
            }

            puertos.forEach((port) => {
                const option = document.createElement("option");
                option.value = port;
                option.textContent = port;
                selector.appendChild(option);
            });
        } catch (err) {
            console.error("Error al escanear puertos:", err);
            alert("Error al escanear puertos desde backend.");
        }
    }

    // Conectar al puerto seleccionado
    async function conectarPuertoSerial() {
        const selector = document.getElementById("com-port-selector");
        const port = selector?.value;
        if (!port) return alert("Seleccione un puerto.");

        try {
            const response = await fetch(
                "http://localhost:5000/api/serial/connect",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(port),
                },
            );

            const mensaje = await response.text();
            mostrarNotificacion(mensaje, "real");

            // üî¥ Marcar como conectado y lanzar evento global
            puertoSerialConectado = true;
            puertoPreviamenteConectado = true;
            window.dispatchEvent(new Event("puertoConectado"));
        } catch (err) {
            console.error("Error al conectar:", err);
            alert("Error al conectar al puerto.");
        }
    }

    // Desconectar el puerto serial
    async function desconectarPuertoSerial() {
        const selector = document.getElementById("com-port-selector");
        const port = selector?.value;
        if (!port) {
            mostrarNotificacion(
                "Puerto no seleccionado para desconexi√≥n",
                "error",
            );
            return;
        }

        try {
            const response = await fetch(
                "http://localhost:5000/api/serial/disconnect",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(port),
                },
            );

            const mensaje = await response.text();
            mostrarNotificacion(mensaje, "real");

            puertoSerialConectado = false;
            puertoPreviamenteConectado = false;
            window.dispatchEvent(new Event("puertoDesconectado"));
        } catch (err) {
            console.error("Error al desconectar:", err);
            mostrarNotificacion("Error al desconectar puerto", "error");
        }
    }

    // Asignar eventos a botones del header al cargar
    window.addEventListener("DOMContentLoaded", () => {
        const btnScanCom = document.getElementById("btn-scan-com");
        const btnConnectCom = document.getElementById("btn-connect-com");
        const btnDisconnectCom = document.getElementById("btn-disconnect-com");

        if (btnScanCom)
            btnScanCom.addEventListener("click", escanearPuertosCOM);
        if (btnConnectCom)
            btnConnectCom.addEventListener("click", conectarPuertoSerial);
        if (btnDisconnectCom)
            btnDisconnectCom.addEventListener("click", desconectarPuertoSerial);

        escanearPuertosCOM();
    });

    // Manejo de los paneles (cabina 1 y 2)
    document.addEventListener("DOMContentLoaded", () => {
        const panels = document.querySelectorAll(".panel-container");

        panels.forEach((panel, index) => {
            const tabButtons = panel.querySelectorAll("[data-tab]");
            const tabContents = panel.querySelectorAll("[data-tab-content]");
            const selects = panel.querySelectorAll("select");
            const controlButtons = panel.querySelectorAll(".control-btn");
            const ledButtons = panel.querySelectorAll(".led-button");

            // Elementos del formulario de tiempo
            const tiempoInput = panel.querySelector("#tiempo-input-form");
            const tiempoMostrado = panel.querySelector("#tiempo-mostrado");
            const btnEnviarTiempo = panel.querySelector("#btn-enviar-tiempo");

            // Elementos de estado visual
            const estadoCabina = panel.querySelector("#estado-cabina");
            const colorCabina = panel.querySelector("#color-cabina");
            const estadoHumo = panel.querySelector("#estado-humo");
            const botonHumo = panel.querySelector("[data-medicion='X']");
            let cabinaActiva = false;
            let humoActivado = false;

            // Selector de cabina por panel
            const selectCabina = panel.querySelector("[data-select='cabina']");
            let cabinaPrefijo = "C1"; // Valor inicial por panel

            if (selectCabina) {
                selectCabina.addEventListener("change", () => {
                    cabinaPrefijo =
                        selectCabina.value === "Cabina 1" ? "C1" : "C2";
                    console.log(
                        `Panel ${index + 1}: Cabina seleccionada: ${cabinaPrefijo}`,
                    );
                });
            }

            // Manejo de pesta√±as
            tabButtons.forEach((button) => {
                button.addEventListener("click", () => {
                    tabButtons.forEach((btn) => {
                        btn.classList.remove(
                            "bg-[#00bf63]",
                            "text-black",
                            "active",
                        );
                        btn.classList.add("bg-[#efefef]", "text-black");
                        btn.setAttribute("aria-selected", "false");
                        btn.setAttribute("tabindex", "-1");
                    });

                    button.classList.remove("bg-[#efefef]", "text-black");
                    button.classList.add(
                        "bg-[#d9d9d9]",
                        "text-black",
                        "active",
                    );
                    button.setAttribute("aria-selected", "true");
                    button.setAttribute("tabindex", "0");

                    tabContents.forEach((content) =>
                        content.classList.add("hidden"),
                    );

                    const selectedTab = button.getAttribute("data-tab");
                    const selectedContent = panel.querySelector(
                        `[data-tab-content='${selectedTab}']`,
                    );
                    if (selectedContent) {
                        selectedContent.classList.remove("hidden");
                        if (selectedTab === "graficas") {
                            initGrafica(panel);
                        }
                    }
                });
            });

            // Funci√≥n para actualizar hover en pesta√±as
            function updateTabHover() {
                tabButtons.forEach((btn) => {
                    if (btn.classList.contains("active")) {
                        btn.classList.remove("hover:bg-[#a6a6a6]");
                    } else {
                        btn.classList.add("hover:bg-[#a6a6a6]");
                    }
                });
            }

            // Funci√≥n para actualizar hover en selectores
            function updateSelectHover() {
                selects.forEach((select) => {
                    const isActive = select.value.includes("1");
                    if (isActive) {
                        select.style.transition = "none";
                        select.style.backgroundColor =
                            window.getComputedStyle(select).backgroundColor;
                        select.classList.remove("hover:bg-[#a6a6a6]");
                    } else {
                        select.style.transition = "";
                        select.style.backgroundColor = "";
                        select.classList.add("hover:bg-[#a6a6a6]");
                    }
                });
            }

            // Eventos de cambio en selects
            selects.forEach((select) => {
                select.addEventListener("change", updateSelectHover);
            });

            // Solo un bot√≥n de control puede estar activo a la vez
            controlButtons.forEach((btn) => {
                btn.addEventListener("click", () => {
                    const codigo = btn.getAttribute("data-codigo");
                    const isActive = btn.classList.contains("bg-[#00bf63]");

                    if (isActive) {
                        btn.classList.remove("bg-[#00bf63]");
                        btn.classList.add("bg-[#d9d9d9]");
                        if (codigo && codigoBoton[codigo]) {
                            enviarTrama(
                                cabinaPrefijo,
                                codigoBoton[codigo].off,
                                cabinaActiva,
                            );
                        }
                    } else {
                        controlButtons.forEach((b) => {
                            const cod = b.getAttribute("data-codigo");
                            if (
                                b.classList.contains("bg-[#00bf63]") &&
                                cod &&
                                codigoBoton[cod]
                            ) {
                                b.classList.remove("bg-[#00bf63]");
                                b.classList.add("bg-[#d9d9d9]");
                                enviarTrama(
                                    cabinaPrefijo,
                                    codigoBoton[cod].off,
                                    cabinaActiva,
                                );
                            }
                        });

                        btn.classList.remove("bg-[#d9d9d9]");
                        btn.classList.add("bg-[#00bf63]");
                        if (codigo && codigoBoton[codigo]) {
                            enviarTrama(
                                cabinaPrefijo,
                                codigoBoton[codigo].on,
                                cabinaActiva,
                            );
                        }
                    }
                });
            });

            // Manejo de LEDs - solo un LED activo por panel
            let ledActivo = null;

            ledButtons.forEach((button) => {
                button.addEventListener("click", () => {
                    const codigo = button.getAttribute("data-codigo");
                    const isActive = button.classList.contains("active-led");

                    if (!codigo) return;

                    if (isActive) {
                        button.classList.remove("active-led");
                        button.style.backgroundColor = button.getAttribute(
                            "data-inactive-color",
                        );
                        colorCabina.style.backgroundColor = "#d9d9d9";

                        enviarTrama(cabinaPrefijo, codigo, cabinaActiva);
                        ledActivo = null;
                    } else {
                        if (ledActivo) {
                            const codAnterior =
                                ledActivo.getAttribute("data-codigo");
                            ledActivo.classList.remove("active-led");
                            ledActivo.style.backgroundColor =
                                ledActivo.getAttribute("data-inactive-color");
                            enviarTrama(
                                cabinaPrefijo,
                                codAnterior,
                                cabinaActiva,
                            );
                        }

                        button.classList.add("active-led");
                        button.style.backgroundColor =
                            button.getAttribute("data-active-color");
                        colorCabina.style.backgroundColor =
                            button.getAttribute("data-active-color");
                        enviarTrama(cabinaPrefijo, codigo, cabinaActiva);

                        ledActivo = button;
                    }
                });
            });

            // Bot√≥n Enviar Configuraci√≥n - Inicia la cabina
            const btnIniciar = panel.querySelector("#btn-enviar-configuracion");
            const btnReset = panel.querySelector("#btn-parar-reset"); // Nueva l√≠nea
            if (btnIniciar && estadoCabina) {
                function actualizarEstadoBotonIniciar() {
                    const activo = puertoSerialConectado;
                    btnIniciar.disabled = !activo;
                    btnIniciar.classList.toggle("opacity-50", !activo);
                    btnIniciar.classList.toggle("cursor-not-allowed", !activo);
                    btnIniciar.title = activo
                        ? ""
                        : "Conecte un puerto COM para iniciar la cabina";

                    // Tambi√©n actualizamos el bot√≥n de reset
                    if (btnReset) {
                        btnReset.disabled = !activo;
                        btnReset.classList.toggle("opacity-50", !activo);
                        btnReset.classList.toggle(
                            "cursor-not-allowed",
                            !activo,
                        );
                        btnReset.title = activo
                            ? ""
                            : "Conecte un puerto COM para usar esta funci√≥n";
                    }
                }

                // Escuchar cambios globales de conexi√≥n
                window.addEventListener("puertoConectado", () => {
                    puertoSerialConectado = true;
                    actualizarEstadoBotonIniciar();
                });

                window.addEventListener("puertoDesconectado", () => {
                    puertoSerialConectado = false;
                    actualizarEstadoBotonIniciar();
                });

                // Llamada inicial
                actualizarEstadoBotonIniciar();

                btnIniciar.addEventListener("click", () => {
                    if (!puertoSerialConectado) {
                        alert(
                            "Debe conectar un puerto COM antes de iniciar la cabina.",
                        );
                        return;
                    }

                    cabinaActiva = true; // ‚úÖ ACTIVAMOS la cabina
                    estadoCabina.classList.remove("bg-[#ff4d4d]");
                    estadoCabina.classList.add("bg-[#00bf63]");
                    estadoCabina.textContent = "ACTIVA";

                    mostrarNotificacion("üöÄ Cabina iniciada", "real");
                });
            }

            // Bot√≥n Parar y Reset - Reinicia todo
            if (btnReset && estadoCabina) {
                btnReset.addEventListener("click", async () => {
                    if (
                        !puertoSerial ||
                        !puertoSerial.readable ||
                        !puertoSerial.writable
                    ) {
                        alert(
                            "‚ö†Ô∏è No hay un puerto COM conectado. No se puede reiniciar la cabina.",
                        );
                        return;
                    }

                    estadoCabina.classList.remove("bg-[#00bf63]");
                    estadoCabina.classList.add("bg-[#ff4d4d]");
                    estadoCabina.textContent = "INACTIVA";
                    cabinaActiva = false;

                    // Enviar tramas de apagado para todos los LEDs activos
                    if (ledActivo) {
                        const codAnterior =
                            ledActivo.getAttribute("data-codigo");
                        if (codAnterior) {
                            await enviarTrama(cabinaPrefijo, codAnterior, true); // Env√≠o real
                        }
                        ledActivo.classList.remove("active-led");
                        ledActivo.style.backgroundColor =
                            ledActivo.getAttribute("data-inactive-color");
                        colorCabina.style.backgroundColor = "#d9d9d9";
                        ledActivo = null;
                    }

                    // Enviar trama OFF para cada bot√≥n activo
                    controlButtons.forEach((btn) => {
                        const codigo = btn.getAttribute("data-codigo");
                        if (
                            btn.classList.contains("bg-[#00bf63]") &&
                            codigo &&
                            codigoBoton[codigo]
                        ) {
                            btn.classList.remove("bg-[#00bf63]");
                            btn.classList.add("bg-[#d9d9d9]");
                            enviarTrama(
                                cabinaPrefijo,
                                codigoBoton[codigo].off,
                                true,
                            );
                        }
                    });

                    const graficaCanvas = panel.querySelector("#graficaPanel");
                    if (graficaCanvas && graficaCanvas.chartInstance) {
                        graficaCanvas.chartInstance.destroy();
                    }

                    const medicionTextos =
                        panel.querySelectorAll(".medicion-texto");
                    medicionTextos.forEach((txt) => {
                        txt.textContent = "N/A";
                    });

                    ledButtons.forEach((led) => {
                        led.classList.remove("active-led");
                        led.style.backgroundColor = led.getAttribute(
                            "data-inactive-color",
                        );
                    });

                    if (tiempoInput) {
                        tiempoInput.value = 0;
                        tiempoMostrado.textContent = 0;
                    }

                    if (ledActivo) {
                        ledActivo = null;
                        colorCabina.style.backgroundColor = "#d9d9d9";
                    }

                    alert("Sistema detenido. Todo ha sido reiniciado.");
                });
            }

            // Interacci√≥n del bot√≥n "Enviar Tiempo"
            if (btnEnviarTiempo && tiempoInput && tiempoMostrado) {
                tiempoInput.addEventListener("input", () => {
                    let valor = parseInt(tiempoInput.value);
                    if (!valor || valor < 0) {
                        tiempoInput.value = 0;
                        valor = 0;
                    }
                    tiempoMostrado.textContent = valor;
                });

                btnEnviarTiempo.addEventListener("click", () => {
                    let valorMinutos = parseInt(tiempoInput.value);
                    if (!valorMinutos || valorMinutos < 0) {
                        alert(
                            "Por favor, ingrese un n√∫mero v√°lido y no negativo.",
                        );
                        tiempoInput.value = 0;
                        valorMinutos = 0;
                    }
                    tiempoMostrado.textContent = valorMinutos;
                    const valorSegundos = Math.min(valorMinutos * 60, 300); // M√°ximo 5 minutos
                    const graficaCanvas = panel.querySelector("#graficaPanel");
                    if (graficaCanvas) {
                        graficaCanvas.setAttribute(
                            "data-time-range",
                            valorSegundos,
                        );
                        if (cabinaActiva && graficaCanvas.chartInstance) {
                            const chart = graficaCanvas.chartInstance;
                            const labels = [];
                            for (let i = 0; i < 10; i++) {
                                labels.push(`${i * (valorSegundos / 10)}s`);
                            }
                            chart.data.labels = labels;
                            chart.data.datasets[0].data = labels.map(() =>
                                Math.floor(Math.random() * 5),
                            );
                            chart.update();
                        }
                    }
                });
            }

            // Bot√≥n Humo - Actualiza estado del detector
            if (botonHumo && estadoHumo) {
                botonHumo.addEventListener("click", () => {
                    if (!cabinaActiva) {
                        alert(
                            "La cabina debe estar activa antes de usar esta funci√≥n.",
                        );
                        return;
                    }
                    humoActivado = !humoActivado;
                    if (humoActivado) {
                        estadoHumo.style.backgroundColor = "#d9d9d9";
                        estadoHumo.style.opacity = "1";
                    } else {
                        estadoHumo.style.backgroundColor = "#ccc";
                        estadoHumo.style.opacity = "0.5";
                    }
                });
            }

            // Manejo de botones de medici√≥n
            const medicionBotones = panel.querySelectorAll(".medicion-btn");
            const medicionTextos = panel.querySelectorAll(".medicion-texto");

            if (medicionBotones.length > 0 && medicionTextos.length > 0) {
                medicionBotones.forEach((boton, index) => {
                    boton.addEventListener("click", () => {
                        if (!cabinaActiva) {
                            alert(
                                "Por favor, inicie la cabina antes de usar las mediciones.",
                            );
                            return;
                        }

                        // Desactivar otros botones de medici√≥n
                        medicionBotones.forEach((btn, i) => {
                            if (btn !== boton) {
                                btn.classList.remove("activo", "bg-[#00bf63]");
                                btn.classList.add("bg-[#d9d9d9]");
                                medicionTextos[i].textContent = "N/A";
                            }
                        });

                        // Activar este bot√≥n y mostrar dato simulado
                        boton.classList.remove("bg-[#d9d9d9]");
                        boton.classList.add("bg-[#00bf63]", "activo");

                        const nombre = boton.dataset.medicion;
                        const textoElemento = medicionTextos[index];
                        const valorSimulado = (Math.random() * 10).toFixed(1);
                        textoElemento.textContent = `${valorSimulado} ${getUnidad(nombre)}`;
                    });
                });
            }

            setTimeout(updateTabHover, 0);
            setTimeout(updateSelectHover, 0);
        });
    });

    // Funci√≥n para obtener unidad seg√∫n medici√≥n
    function getUnidad(medicion) {
        switch (medicion) {
            case "X":
                return "m";
            case "T":
                return "¬∞C";
            case "CO2":
                return "ppm";
            case "Y":
                return "m";
            case "%H":
                return "%";
            case "%O2":
                return "%";
            case "Z":
                return "m";
            case "UV":
                return "W/m¬≤";
            case "Son":
                return "dB";
            default:
                return "";
        }
    }

    // Funci√≥n para inicializar gr√°fica con Chart.js
    async function initGrafica(panel) {
        const graficaCanvas = panel.querySelector("#graficaPanel");
        if (!graficaCanvas) return;

        const selectCabina = panel.querySelector("[data-select='cabina']");
        const cabina = selectCabina?.value.includes("1") ? "c1" : "c2";

        const selectSensor = panel.querySelector("[data-select='sensor']") || {
            value: "T",
        };
        const sensor = selectSensor.value; // Por defecto: T (temperatura)

        try {
            const response = await fetch(
                `http://localhost:5000/api/serial/datos/${cabina}`,
            );
            const datos = await response.json();

            if (!Array.isArray(datos) || datos.length === 0) {
                alert(`Sin datos disponibles para ${cabina.toUpperCase()}`);
                return;
            }

            const labels = datos.map((_, i) => `${i}`);
            const valores = datos.map((d) => {
                switch (sensor) {
                    case "T":
                        return d.t;
                    case "H":
                        return d.h;
                    case "UV":
                        return d.uv;
                    case "CO2":
                        return d.co2;
                    case "O3":
                        return d.o3;
                    case "dB":
                        return d.db;
                    case "X":
                        return d.x;
                    case "Y":
                        return d.y;
                    case "Z":
                        return d.z;
                    default:
                        return 0;
                }
            });

            const existingChart = Chart.getChart(graficaCanvas);
            if (existingChart) existingChart.destroy();

            const ctx = graficaCanvas.getContext("2d");
            graficaCanvas.chartInstance = new Chart(ctx, {
                type: "line",
                data: {
                    labels,
                    datasets: [
                        {
                            label: `${sensorConfig[sensor]?.label || "Dato"}`,
                            data: valores,
                            borderColor: "#000",
                            backgroundColor: "rgba(0, 74, 173, 0.2)",
                            tension: 0.3,
                            pointRadius: 0,
                            fill: true,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Muestras",
                                color: "#333",
                                font: { weight: "bold" },
                            },
                            ticks: {
                                display: false,
                            },
                            grid: { color: "#eee" },
                        },
                        y: {
                            title: {
                                display: true,
                                text: sensorConfig[sensor]?.label || "Valor",
                                color: "#333",
                                font: { weight: "bold" },
                            },
                            grid: { color: "#eee" },
                        },
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: { color: "#333" },
                        },
                    },
                },
            });
        } catch (error) {
            console.error("Error al cargar datos de sensor:", error);
            alert("No se pudieron cargar datos desde el backend.");
        }
    }
</script>