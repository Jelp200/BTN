const codigoBoton = {
  "VIBRACION": { off: "038", on: "039" },
  "VENTILADOR": { off: "040", on: "041" },
  "EXTRACTOR": { off: "042", on: "043" },
  "FRIO": { off: "044", on: "045" },
  "CALOR": { off: "046", on: "047" },
  "HUMEDAD": { off: "048", on: "049" },
  "DESHUMIDIFICADOR": { off: "055", on: "056" },
  "HUMO": { off: "050", on: "051" }
};
let puertoSerial;
let escritor;
window.mostrarTramaEnLog = function(trama, tipo = "pendiente") {
  const logWindow = document.getElementById("trama-log-window");
  if (!logWindow) return;
  if (logWindow.children.length === 1 && logWindow.firstElementChild.textContent.includes("No hay tramas aún")) {
    logWindow.innerHTML = "";
  }
  const entry = document.createElement("div");
  entry.className = "p-1 truncate text-xs";
  let icono = "🟡";
  if (tipo === "real") icono = "🟢";
  entry.textContent = `${icono} ${trama}`;
  logWindow.insertBefore(entry, logWindow.firstChild);
};
async function enviarTramaReal(trama) {
  if (!escritor) {
    console.warn("Puerto no conectado. Simulando trama:", trama);
    return;
  }
  try {
    const encoder = new TextEncoder();
    await escritor.write(encoder.encode(trama));
    console.log("Trama enviada real:", trama);
    window.mostrarTramaEnLog(trama, "real");
  } catch (err) {
    console.error("Error al enviar trama:", err);
    alert("Error de comunicación serial. Verifica el puerto.");
  }
}
function enviarTrama(prefijo, codigoAccion, cabinaActiva) {
  const trama = `${prefijo}${codigoAccion}F`;
  if (cabinaActiva) {
    enviarTramaReal(trama);
  } else {
    console.log("[Pendiente] Trama generada:", trama);
    if (window.mostrarTramaEnLog) {
      window.mostrarTramaEnLog(trama, "pendiente");
    }
  }
}
async function escanearPuertosCOM() {
  const selector = document.getElementById("com-port-selector");
  if (!selector) return;
  try {
    const puertos = await navigator.serial.getPorts();
    selector.innerHTML = "";
    if (puertos.length === 0) {
      const option = document.createElement("option");
      option.textContent = "No hay puertos disponibles";
      option.disabled = true;
      selector.appendChild(option);
      console.log("No se encontraron puertos.");
      alert("No hay puertos COM conectados.");
      return;
    }
    puertos.forEach((port, index) => {
      const option = document.createElement("option");
      option.value = port.portId;
      option.textContent = port.name;
      selector.appendChild(option);
    });
    console.log("Puertos escaneados:", puertos);
    alert(`Se encontraron ${puertos.length} puertos COM.`);
  } catch (err) {
    console.error("Error al escanear puertos:", err);
    alert("❌ Web Serial no disponible o acceso denegado.");
  }
}
async function conectarPuertoSerial() {
  const selector = document.getElementById("com-port-selector");
  if (!selector) return;
  const selectedIndex = selector.selectedIndex;
  if (selectedIndex === -1 || selectedIndex === 0) {
    alert("Por favor, seleccione un puerto válido.");
    return;
  }
  try {
    const puertoSeleccionado = await navigator.serial.requestPort();
    await puertoSeleccionado.open({ baudRate: 9600 });
    escritor = puertoSeleccionado.writable.getWriter();
    console.log("Puerto conectado:", puertoSeleccionado);
    alert("✅ Puerto serial conectado exitosamente.");
  } catch (err) {
    console.error("Error al conectar puerto COM:", err);
    alert("❌ No se pudo conectar al puerto seleccionado.");
  }
}
window.addEventListener("DOMContentLoaded", () => {
  const btnScanCom = document.getElementById("btn-scan-com");
  const btnConnectCom = document.getElementById("btn-connect-com");
  if (btnScanCom) btnScanCom.addEventListener("click", escanearPuertosCOM);
  if (btnConnectCom) btnConnectCom.addEventListener("click", conectarPuertoSerial);
  escanearPuertosCOM();
});
document.addEventListener("DOMContentLoaded", () => {
  const panels = document.querySelectorAll(".panel-container");
  panels.forEach((panel, index) => {
    const tabButtons = panel.querySelectorAll("[data-tab]");
    const tabContents = panel.querySelectorAll("[data-tab-content]");
    const selects = panel.querySelectorAll("select");
    const controlButtons = panel.querySelectorAll(".control-btn");
    const ledButtons = panel.querySelectorAll(".led-button");
    const tiempoInput = panel.querySelector("#tiempo-input-form");
    const tiempoMostrado = panel.querySelector("#tiempo-mostrado");
    const btnEnviarTiempo = panel.querySelector("#btn-enviar-tiempo");
    const estadoCabina = panel.querySelector("#estado-cabina");
    const colorCabina = panel.querySelector("#color-cabina");
    const estadoHumo = panel.querySelector("#estado-humo");
    const botonHumo = panel.querySelector("[data-medicion='X']");
    let cabinaActiva = false;
    let humoActivado = false;
    const selectCabina = panel.querySelector("[data-select='cabina']");
    let cabinaPrefijo = "C1";
    if (selectCabina) {
      selectCabina.addEventListener("change", () => {
        cabinaPrefijo = selectCabina.value === "Cabina 1" ? "C1" : "C2";
        console.log(`Panel ${index + 1}: Cabina seleccionada: ${cabinaPrefijo}`);
      });
    }
    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => {
          btn.classList.remove("bg-[#00bf63]", "text-black", "active");
          btn.classList.add("bg-[#efefef]", "text-black");
          btn.setAttribute("aria-selected", "false");
          btn.setAttribute("tabindex", "-1");
        });
        button.classList.remove("bg-[#efefef]", "text-black");
        button.classList.add("bg-[#d9d9d9]", "text-black", "active");
        button.setAttribute("aria-selected", "true");
        button.setAttribute("tabindex", "0");
        tabContents.forEach((content) => content.classList.add("hidden"));
        const selectedTab = button.getAttribute("data-tab");
        const selectedContent = panel.querySelector(`[data-tab-content='${selectedTab}']`);
        if (selectedContent) {
          selectedContent.classList.remove("hidden");
          if (selectedTab === "graficas") {
            initGrafica(panel);
          }
        }
      });
    });
    function updateTabHover() {
      tabButtons.forEach((btn) => {
        if (btn.classList.contains("active")) {
          btn.classList.remove("hover:bg-[#a6a6a6]");
        } else {
          btn.classList.add("hover:bg-[#a6a6a6]");
        }
      });
    }
    function updateSelectHover() {
      selects.forEach((select) => {
        const isActive = select.value.includes("1");
        if (isActive) {
          select.style.transition = "none";
          select.style.backgroundColor = window.getComputedStyle(select).backgroundColor;
          select.classList.remove("hover:bg-[#a6a6a6]");
        } else {
          select.style.transition = "";
          select.style.backgroundColor = "";
          select.classList.add("hover:bg-[#a6a6a6]");
        }
      });
    }
    selects.forEach((select) => {
      select.addEventListener("change", updateSelectHover);
    });
    controlButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const codigo = btn.getAttribute("data-codigo");
        const isActive = btn.classList.contains("bg-[#00bf63]");
        if (isActive) {
          btn.classList.remove("bg-[#00bf63]");
          btn.classList.add("bg-[#d9d9d9]");
          if (codigo && codigoBoton[codigo]) {
            enviarTrama(cabinaPrefijo, codigoBoton[codigo].off, cabinaActiva);
          }
        } else {
          controlButtons.forEach((b) => {
            const cod = b.getAttribute("data-codigo");
            if (b.classList.contains("bg-[#00bf63]") && cod && codigoBoton[cod]) {
              b.classList.remove("bg-[#00bf63]");
              b.classList.add("bg-[#d9d9d9]");
              enviarTrama(cabinaPrefijo, codigoBoton[cod].off, cabinaActiva);
            }
          });
          btn.classList.remove("bg-[#d9d9d9]");
          btn.classList.add("bg-[#00bf63]");
          if (codigo && codigoBoton[codigo]) {
            enviarTrama(cabinaPrefijo, codigoBoton[codigo].on, cabinaActiva);
          }
        }
      });
    });
    let ledActivo = null;
    ledButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const codigo = button.getAttribute("data-codigo");
        const isActive = button.classList.contains("active-led");
        if (!codigo) return;
        if (isActive) {
          button.classList.remove("active-led");
          button.style.backgroundColor = button.getAttribute("data-inactive-color");
          colorCabina.style.backgroundColor = "#d9d9d9";
          enviarTrama(cabinaPrefijo, codigo, cabinaActiva);
          ledActivo = null;
        } else {
          if (ledActivo) {
            const codAnterior = ledActivo.getAttribute("data-codigo");
            ledActivo.classList.remove("active-led");
            ledActivo.style.backgroundColor = ledActivo.getAttribute("data-inactive-color");
            enviarTrama(cabinaPrefijo, codAnterior, cabinaActiva);
          }
          button.classList.add("active-led");
          button.style.backgroundColor = button.getAttribute("data-active-color");
          colorCabina.style.backgroundColor = button.getAttribute("data-active-color");
          enviarTrama(cabinaPrefijo, codigo, cabinaActiva);
          ledActivo = button;
        }
      });
    });
    const btnIniciar = panel.querySelector("#btn-enviar-configuracion");
    if (btnIniciar && estadoCabina) {
      btnIniciar.addEventListener("click", () => {
        if (!cabinaActiva) {
          cabinaActiva = true;
          estadoCabina.classList.remove("bg-[#ff4d4d]");
          estadoCabina.classList.add("bg-[#00bf63]");
          estadoCabina.textContent = "ACTIVA";
          alert("Sistema iniciado. ¡La cabina ha sido activada!");
        } else {
          alert("Ya está activa. No se puede enviar otra vez sin resetear.");
        }
      });
    }
    const btnReset = panel.querySelector("#btn-parar-reset");
    if (btnReset && estadoCabina) {
      btnReset.addEventListener("click", () => {
        estadoCabina.classList.remove("bg-[#00bf63]");
        estadoCabina.classList.add("bg-[#ff4d4d]");
        estadoCabina.textContent = "INACTIVA";
        cabinaActiva = false;
        controlButtons.forEach((btn) => {
          btn.classList.remove("bg-[#00bf63]");
          btn.classList.add("bg-[#d9d9d9]");
        });
        const graficaCanvas = panel.querySelector("#graficaPanel");
        if (graficaCanvas && graficaCanvas.chartInstance) {
          graficaCanvas.chartInstance.destroy();
        }
        const medicionTextos2 = panel.querySelectorAll(".medicion-texto");
        medicionTextos2.forEach((txt) => {
          txt.textContent = "N/A";
        });
        ledButtons.forEach((led) => {
          led.classList.remove("active-led");
          led.style.backgroundColor = led.getAttribute("data-inactive-color");
        });
        if (tiempoInput) {
          tiempoInput.value = 0;
          tiempoMostrado.textContent = 0;
        }
        if (ledActivo) {
          ledActivo = null;
          colorCabina.style.backgroundColor = "#d9d9d9";
        }
        alert("Sistema detenido. Todo ha sido reiniciado.");
      });
    }
    if (btnEnviarTiempo && tiempoInput && tiempoMostrado) {
      tiempoInput.addEventListener("input", () => {
        let valor = parseInt(tiempoInput.value);
        if (!valor || valor < 0) {
          tiempoInput.value = 0;
          valor = 0;
        }
        tiempoMostrado.textContent = valor;
      });
      btnEnviarTiempo.addEventListener("click", () => {
        let valorMinutos = parseInt(tiempoInput.value);
        if (!valorMinutos || valorMinutos < 0) {
          alert("Por favor, ingrese un número válido y no negativo.");
          tiempoInput.value = 0;
          valorMinutos = 0;
        }
        tiempoMostrado.textContent = valorMinutos;
        const valorSegundos = Math.min(valorMinutos * 60, 300);
        const graficaCanvas = panel.querySelector("#graficaPanel");
        if (graficaCanvas) {
          graficaCanvas.setAttribute("data-time-range", valorSegundos);
          if (cabinaActiva && graficaCanvas.chartInstance) {
            const chart = graficaCanvas.chartInstance;
            const labels = [];
            for (let i = 0; i < 10; i++) {
              labels.push(`${i * (valorSegundos / 10)}s`);
            }
            chart.data.labels = labels;
            chart.data.datasets[0].data = labels.map(
              () => Math.floor(Math.random() * 5)
            );
            chart.update();
          }
        }
      });
    }
    if (botonHumo && estadoHumo) {
      botonHumo.addEventListener("click", () => {
        if (!cabinaActiva) {
          alert("La cabina debe estar activa antes de usar esta función.");
          return;
        }
        humoActivado = !humoActivado;
        if (humoActivado) {
          estadoHumo.style.backgroundColor = "#d9d9d9";
          estadoHumo.style.opacity = "1";
        } else {
          estadoHumo.style.backgroundColor = "#ccc";
          estadoHumo.style.opacity = "0.5";
        }
      });
    }
    const medicionBotones = panel.querySelectorAll(".medicion-btn");
    const medicionTextos = panel.querySelectorAll(".medicion-texto");
    if (medicionBotones.length > 0 && medicionTextos.length > 0) {
      medicionBotones.forEach((boton, index2) => {
        boton.addEventListener("click", () => {
          if (!cabinaActiva) {
            alert("Por favor, inicie la cabina antes de usar las mediciones.");
            return;
          }
          medicionBotones.forEach((btn, i) => {
            if (btn !== boton) {
              btn.classList.remove("activo", "bg-[#00bf63]");
              btn.classList.add("bg-[#d9d9d9]");
              medicionTextos[i].textContent = "N/A";
            }
          });
          boton.classList.remove("bg-[#d9d9d9]");
          boton.classList.add("bg-[#00bf63]", "activo");
          const nombre = boton.dataset.medicion;
          const textoElemento = medicionTextos[index2];
          const valorSimulado = (Math.random() * 10).toFixed(1);
          textoElemento.textContent = `${valorSimulado} ${getUnidad(nombre)}`;
        });
      });
    }
    setTimeout(updateTabHover, 0);
    setTimeout(updateSelectHover, 0);
  });
});
function getUnidad(medicion) {
  switch (medicion) {
    case "X":
      return "m";
    case "T":
      return "°C";
    case "CO2":
      return "ppm";
    case "Y":
      return "m";
    case "%H":
      return "%";
    case "%O2":
      return "%";
    case "Z":
      return "m";
    case "UV":
      return "W/m²";
    case "Son":
      return "dB";
    default:
      return "";
  }
}
function initGrafica(panel) {
  const graficaCanvas = panel.querySelector("#graficaPanel");
  if (!graficaCanvas) return;
  const existingChart = Chart.getChart(graficaCanvas);
  if (existingChart) {
    existingChart.destroy();
  }
  const ctx = graficaCanvas.getContext("2d");
  const valorSegundos = parseInt(graficaCanvas.getAttribute("data-time-range")) || 300;
  const labels = [];
  const maxPuntos = 10;
  for (let i = 0; i < maxPuntos; i++) {
    labels.push(`${i * (valorSegundos / maxPuntos)}s`);
  }
  const dataValues = labels.map(() => Math.floor(Math.random() * 5));
  graficaCanvas.chartInstance = new Chart(ctx, {
    type: "line",
    data: {
      labels,
      datasets: [{
        label: "Sensor 1",
        data: dataValues,
        borderColor: "#000",
        backgroundColor: "rgba(0, 74, 173, 0.2)",
        tension: 0.3,
        pointRadius: 4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: {
          title: {
            display: true,
            text: "Tiempo (s)",
            color: "#333",
            font: { weight: "bold" }
          },
          grid: { color: "#ddd" }
        },
        y: {
          title: {
            display: true,
            text: "Amplitud",
            color: "#333",
            font: { weight: "bold" }
          },
          grid: { color: "#ddd" }
        }
      },
      plugins: {
        legend: {
          display: true,
          labels: { color: "#333" }
        }
      }
    }
  });
}

//# sourceMappingURL=data:application/json;base64,